// Data extracted from agentic-arch-graph

const nodes = [
  {
    "short_id": "A",
    "id": "prompt_chaining",
    "label": "Prompt Chaining",
    "aliases": ["Chain Composition", "Task Decomposition", "Multi-step Prompting", "Stepwise Orchestration"],
    "layer": "reasoning_core",
    "polarity": "fluxus",
    "human_role": "none",
    "compute": "medium",
    "state": "stateless",
    "safety_surface": "medium",
    "description": "Break a large task into validated steps; each step checks the prior step before pass-through.",
    "when_to_use": "Complex multi-step processes; data ETL; document processing; report generation; content creation.",
    "pros": ["Modular", "Failure isolation", "Easier auditing and debugging"],
    "cons": ["Context explosion across steps", "Error propagation if early checks are weak", "Added latency", "Diminishing returns with very long chains"],
    "notes": "Keep chain length reasonable (often 3–5) to avoid overthinking or hallucination amplification."
  },
  {
    "short_id": "B",
    "id": "routing",
    "label": "Routing",
    "aliases": ["Skill Routing", "Policy Router", "Tool Router", "Agent Router"],
    "layer": "coordination",
    "polarity": "latticus",
    "human_role": "none",
    "compute": "low",
    "state": "stateless",
    "safety_surface": "medium",
    "description": "Classify intent and context and dispatch to the right specialist; ask clarifying questions when uncertain.",
    "pros": ["Specialization", "Scalability", "Tool segregation", "Lower misfires"],
    "cons": ["Wrong-path risk", "Edge-case sensitivity", "Often benefits from a manager-agent overseeing decisions"]
  },
  {
    "short_id": "C",
    "id": "parallelization",
    "label": "Parallelization",
    "aliases": ["Concurrency", "Batching", "Sharding", "Fan-out"],
    "layer": "coordination",
    "polarity": "latticus",
    "human_role": "none",
    "compute": "high",
    "state": "stateless",
    "safety_surface": "low",
    "description": "Decompose work into independent chunks processed simultaneously by worker agents; normalize and merge outputs.",
    "use_cases": ["Large-scale data", "Time-sensitive operations", "Web crawling", "Document intelligence", "Research automation", "Testing frameworks"],
    "tradeoffs": "Throughput increases while coordination and normalization complexity also increase."
  },
  {
    "short_id": "D",
    "id": "reflection",
    "label": "Reflection",
    "aliases": ["Self-Reflection", "Self-critique", "Deliberate Second Pass", "Audit Pass"],
    "layer": "reasoning_core",
    "polarity": "fluxus",
    "human_role": "optional",
    "compute": "medium",
    "state": "stateless",
    "safety_surface": "medium",
    "description": "Draft → critique against rubrics and tests → revise → loop to a quality threshold or max attempts.",
    "use": "Quality-critical content, complex reasoning with controlled variability.",
    "pros": ["Higher quality", "Systematic improvement"],
    "cons": ["Cost and latency", "API throttling", "Requires careful loop limits and robust rubrics"]
  },
  {
    "short_id": "E",
    "id": "tool_use",
    "label": "Tool Use",
    "aliases": ["External Tools", "API Calls", "Function Calling", "Plugins"],
    "layer": "planning_control",
    "polarity": "latticus",
    "human_role": "none",
    "compute": "high",
    "state": "cacheable",
    "safety_surface": "high",
    "description": "Discover available tools, verify permissions, call with proper parameters; parse and normalize outputs; provide fallbacks on failures.",
    "risks": "Misfired tools can propagate errors downstream; log denials and reasons; include normalization steps for tool outputs."
  },
  {
    "short_id": "F",
    "id": "planning",
    "label": "Planning",
    "aliases": ["Task Planning", "Plan-and-Act", "Decomposition Planning", "Project Planner"],
    "layer": "planning_control",
    "polarity": "latticus",
    "human_role": "optional",
    "compute": "medium",
    "state": "stateful",
    "safety_surface": "medium",
    "description": "Turn big goals into stepwise plans with dependency graphs and constraints (data, authorization, budget, deadlines), then assign to agents and tools.",
    "benefits": ["Strategic execution", "Adaptability", "Clear acceptance criteria"],
    "costs": "Setup and coordination complexity; requires explicit success metrics and checkpoints."
  },
  {
    "short_id": "G",
    "id": "multi_agent_collaboration",
    "label": "Multi-Agent Collaboration",
    "aliases": ["Swarms", "Agent Teams", "Agent Mesh", "Orchestrated Agents"],
    "layer": "coordination",
    "polarity": "latticus",
    "human_role": "optional",
    "compute": "high",
    "state": "stateful",
    "safety_surface": "medium",
    "description": "An orchestrator manages specialist agents that share resources and memory; tickets and acceptance criteria gate progression.",
    "pros": ["Specialization and parallelism", "Fits iterative product or software development"],
    "cons": ["Testing and drift management overhead", "Memory governance required", "Infrastructure complexity"]
  },
  {
    "short_id": "H",
    "id": "memory_management",
    "label": "Memory Management",
    "aliases": ["Long-Term Memory", "Working Memory", "Context Cache", "Vector Store"],
    "layer": "memory_learning",
    "polarity": "fluxus",
    "human_role": "none",
    "compute": "medium",
    "state": "stateful",
    "safety_surface": "medium",
    "description": "Classify and store memories with recency and relevance; compress session context when full; enforce privacy and redaction policies.",
    "use": "Conversational continuity; personalization; education that adapts to learner weaknesses.",
    "risks": "Over-storage, security exposure, stale or irrelevant recalls; implement retention and aging policies."
  },
  {
    "short_id": "I",
    "id": "learning_adaptation",
    "label": "Learning and Adaptation",
    "aliases": ["Continuous Improvement", "Policy Update", "Parameter Update", "Self-Tuning"],
    "layer": "memory_learning",
    "polarity": "fluxus",
    "human_role": "optional",
    "compute": "medium",
    "state": "stateful",
    "safety_surface": "high",
    "description": "Collect corrections, ratings, outcomes; clean and denoise; update prompts, policies, examples, or product preferences; A/B test; monitor.",
    "pros": ["Continuous improvement and personalization"],
    "cons": ["Operational cost", "Risk of learning wrong or malicious signals", "Require quality checks on feedback channels"]
  },
  {
    "short_id": "J",
    "id": "goal_setting_monitoring",
    "label": "Goal Setting and Monitoring",
    "aliases": ["OKRs", "Objectives", "Target Tracking", "Milestone Tracking"],
    "layer": "planning_control",
    "polarity": "latticus",
    "human_role": "optional",
    "compute": "low",
    "state": "stateful",
    "safety_surface": "medium",
    "description": "Define SMART goals with constraints; specify metrics and KPIs; add quality gates; continuously monitor; detect drift; escalate and correct.",
    "use": "Complex projects; autonomous operations; cost management and resource optimization.",
    "tradeoffs": "Efficiency gains vs. rigidity or conflicting goals; prefer transparent thresholds and escalation paths."
  },
  {
    "short_id": "K",
    "id": "exception_handling_recovery",
    "label": "Exception Handling and Recovery",
    "aliases": ["Fallbacks", "Retries", "Circuit Breaker", "Timeout Recovery"],
    "layer": "oversight_safety",
    "polarity": "latticus",
    "human_role": "optional",
    "compute": "low",
    "state": "cacheable",
    "safety_surface": "high",
    "description": "Detect and capture errors; classify temporary vs. permanent; retry with exponential backoff; prefer safe fallbacks; handle emergencies; alert with context.",
    "use": "Production systems, quality assurance, cost-sensitive and mission-critical flows.",
    "notes": "Tune alert thresholds to avoid alert fatigue; design default answers, cached data, or simplified methods as fallbacks."
  },
  {
    "short_id": "L",
    "id": "human_in_the_loop",
    "label": "Human-in-the-Loop",
    "aliases": ["HITL", "Reviewer", "Approval Gate", "Escalation"],
    "layer": "oversight_safety",
    "polarity": "latticus",
    "human_role": "required",
    "compute": "low",
    "state": "stateless",
    "safety_surface": "high",
    "description": "Gate high-risk or edge-case actions behind review and approval; present diffs and context; allow deny, edit, approve, or takeover.",
    "tradeoff": "Trust and safety increase while latency increases; use clear UI cues, timers, and priority queues for reviews."
  },
  {
    "short_id": "M",
    "id": "retrieval_rag",
    "label": "Retrieval - RAG",
    "aliases": ["Retrieval Augmented Generation", "Knowledge Retrieval", "Context Injection", "Document Grounding"],
    "layer": "memory_learning",
    "polarity": "latticus",
    "human_role": "none",
    "compute": "high",
    "state": "cacheable",
    "safety_surface": "medium",
    "description": "Ingest and parse sources; chunk (fixed, semantic, or context-aware); embed; store; query; retrieve top-K; rerank; answer with citations; optimize for precision and recall.",
    "costs": "Infrastructure to maintain embeddings, chunking pipelines, and retrieval indexes; measure and tune recall/precision per domain."
  },
  {
    "short_id": "N",
    "id": "inter_agent_communication",
    "label": "Inter-Agent Communication",
    "aliases": ["Agent Messaging", "Protocol Bus", "Blackboard", "Pub/Sub"],
    "layer": "coordination",
    "polarity": "latticus",
    "human_role": "optional",
    "compute": "low",
    "state": "stateful",
    "safety_surface": "medium",
    "description": "Structured messaging with protocols, message IDs, expirations, and security checks; governance can be boss-centric, peer democracy, or bulletin-board style.",
    "pros": ["Fault isolation", "Full audit trails", "Explicit contracts"],
    "cons": ["Risk of endless loops, context bloat, and debugging burden", "Often impractical at scale without strict governance and timeouts"]
  },
  {
    "short_id": "O",
    "id": "resource_aware_optimization",
    "label": "Resource-Aware Optimization",
    "aliases": ["Budgeting", "Latency-Cost Tradeoff", "Compute Allocation", "Knob Tuning"],
    "layer": "planning_control",
    "polarity": "latticus",
    "human_role": "none",
    "compute": "high",
    "state": "cacheable",
    "safety_surface": "medium",
    "description": "Classify task complexity and set budgets; route to small, standard, or reasoning models; monitor tokens, time, and cost; optimize context or switch models when needed.",
    "use": "Cost-sensitive, high-volume enterprise workloads; prompt caching and context minimization reduce spend.",
    "caveats": "Requires robust complexity classification and confidence estimates; edge cases should trigger human review or safer defaults."
  },
  {
    "short_id": "P",
    "id": "prioritization",
    "label": "Prioritization",
    "aliases": ["Ranking", "Queue Ordering", "Scheduling", "Greedy Selection"],
    "layer": "planning_control",
    "polarity": "latticus",
    "human_role": "optional",
    "compute": "low",
    "state": "stateless",
    "safety_surface": "medium",
    "description": "Build a dependency graph; score tasks by dependency count, time sensitivity, effort, risk, and business value; compute a priority score; rank; re-order as conditions change.",
    "analogy": "Triage the most critical first while ensuring coverage; define deterministic re-prioritization rules to avoid oscillations.",
    "caveat": "Minimize context switching; batch related work to reduce overhead."
  },
  {
    "short_id": "Q",
    "id": "evaluation_monitoring",
    "label": "Evaluation and Monitoring",
    "aliases": ["Evals", "Telemetry", "Metrics", "A/B Tests"],
    "layer": "oversight_safety",
    "polarity": "latticus",
    "human_role": "optional",
    "compute": "medium",
    "state": "stateful",
    "safety_surface": "high",
    "description": "Pre-deployment quality gates and golden tests; in-production monitoring of accuracy, performance, cost, and drift; anomaly and regression detection; thresholds trigger alerts and investigation; periodic audits harden the system.",
    "metrics_and_tests": "Accuracy sets, performance benchmarks, unit and integration tests, contract tests, and critical-path tests.",
    "value_and_risk": "Reliability improves; alert fatigue and performance overhead increase; require disciplined triage and SLO design."
  },
  {
    "short_id": "R",
    "id": "guardrails_safety",
    "label": "Guardrails and Safety",
    "aliases": ["Policy Enforcement", "Content Filters", "Safety Checks", "Red Teaming"],
    "layer": "oversight_safety",
    "polarity": "latticus",
    "human_role": "optional",
    "compute": "low",
    "state": "stateless",
    "safety_surface": "high",
    "description": "Upstream input sanitation; PII detection and redaction; injection and malicious content detection; risk classification and controls; output moderation; sandboxing or tool restrictions for high-risk cases; human oversight for severe events.",
    "practice": "Prefer pre-prompted flows and constrained inputs at scale; log risk scores; keep audit trails for compliance.",
    "tradeoffs": "Risk mitigation and compliance versus false positives and user friction; balance usability with safety."
  },
  {
    "short_id": "S",
    "id": "reasoning_techniques",
    "label": "Reasoning Techniques",
    "aliases": ["Tree-of-Thought", "Graph-of-Thought", "Scratchpad", "Debate"],
    "layer": "reasoning_core",
    "polarity": "fluxus",
    "human_role": "none",
    "compute": "medium",
    "state": "stateless",
    "safety_surface": "low",
    "description": "Choose among sequential reasoning (chain-of-thought), branching exploration (tree-of-thought with pruning), ensembles (self-consistency across samples), or adversarial debate; score candidate solutions via rubric; validate and select or compose.",
    "notes": "Powerful yet costly and slower; easy to overthink; best for complex domains such as legal and medical analysis."
  },
  {
    "short_id": "T",
    "id": "exploration_discovery",
    "label": "Exploration and Discovery",
    "aliases": ["Hypothesis Generation", "Search", "Divergent Thinking", "Probing"],
    "layer": "reasoning_core",
    "polarity": "fluxus",
    "human_role": "optional",
    "compute": "medium",
    "state": "stateless",
    "safety_surface": "low",
    "description": "Broadly survey sources (experts, datasets, papers); compile; map the knowledge space; cluster themes; score by novelty, impact, gaps, feasibility; choose targets; investigate; synthesize artifacts (conceptual models, contacts, curated datasets, bibliographies); iterate to closure; report and recommend next steps.",
    "use": "Research and competitive analysis; deep-research agent designs; discovery-oriented work such as early-stage R&D.",
    "cost": "Time and compute intensive; plan budgets and sampling strategies; capture provenance and selection criteria."
  }
];

const links = [
  { source: "A", target: "D", weight: 0.90 },
  { source: "A", target: "Q", weight: 0.80 },
  { source: "A", target: "K", weight: 0.70 },
  { source: "B", target: "O", weight: 0.90 },
  { source: "B", target: "N", weight: 0.70 },
  { source: "B", target: "L", weight: 0.60 },
  { source: "C", target: "G", weight: 0.85 },
  { source: "C", target: "Q", weight: 0.70 },
  { source: "C", target: "A", weight: 0.60 },
  { source: "D", target: "Q", weight: 0.85 },
  { source: "D", target: "L", weight: 0.70 },
  { source: "D", target: "R", weight: 0.60 },
  { source: "E", target: "R", weight: 0.90 },
  { source: "E", target: "K", weight: 0.80 },
  { source: "E", target: "Q", weight: 0.70 },
  { source: "F", target: "J", weight: 0.95 },
  { source: "F", target: "P", weight: 0.85 },
  { source: "F", target: "O", weight: 0.70 },
  { source: "F", target: "G", weight: 0.60 },
  { source: "G", target: "N", weight: 0.90 },
  { source: "G", target: "H", weight: 0.70 },
  { source: "G", target: "K", weight: 0.70 },
  { source: "G", target: "F", weight: 0.60 },
  { source: "H", target: "M", weight: 0.90 },
  { source: "H", target: "I", weight: 0.80 },
  { source: "H", target: "R", weight: 0.60 },
  { source: "I", target: "Q", weight: 0.90 },
  { source: "I", target: "J", weight: 0.70 },
  { source: "I", target: "F", weight: 0.60 },
  { source: "J", target: "Q", weight: 0.90 },
  { source: "J", target: "P", weight: 0.70 },
  { source: "K", target: "L", weight: 0.90 },
  { source: "K", target: "Q", weight: 0.80 },
  { source: "K", target: "R", weight: 0.70 },
  { source: "L", target: "R", weight: 0.80 },
  { source: "L", target: "Q", weight: 0.70 },
  { source: "L", target: "K", weight: 0.60 },
  { source: "M", target: "H", weight: 0.80 },
  { source: "M", target: "E", weight: 0.70 },
  { source: "N", target: "G", weight: 0.90 },
  { source: "N", target: "L", weight: 0.70 },
  { source: "N", target: "K", weight: 0.60 },
  { source: "O", target: "B", weight: 0.90 },
  { source: "O", target: "Q", weight: 0.80 },
  { source: "O", target: "P", weight: 0.60 },
  { source: "P", target: "F", weight: 0.90 },
  { source: "P", target: "O", weight: 0.70 },
  { source: "P", target: "Q", weight: 0.60 },
  { source: "Q", target: "I", weight: 0.90 },
  { source: "Q", target: "K", weight: 0.70 },
  { source: "Q", target: "O", weight: 0.60 },
  { source: "R", target: "E", weight: 0.90 },
  { source: "R", target: "L", weight: 0.80 },
  { source: "R", target: "K", weight: 0.70 },
  { source: "R", target: "N", weight: 0.60 },
  { source: "S", target: "F", weight: 0.80 },
  { source: "S", target: "D", weight: 0.80 },
  { source: "S", target: "A", weight: 0.60 },
  { source: "T", target: "F", weight: 0.80 },
  { source: "T", target: "C", weight: 0.70 },
  { source: "T", target: "M", weight: 0.60 },
  { source: "T", target: "S", weight: 0.60 }
];

const metrics = {
  "A": { WeightedOut: 2.4, WeightedIn: 1.2, PageRank: 0.011738 },
  "B": { WeightedOut: 2.2, WeightedIn: 0.9, PageRank: 0.035267 },
  "C": { WeightedOut: 2.15, WeightedIn: 0.7, PageRank: 0.009153 },
  "D": { WeightedOut: 2.15, WeightedIn: 1.7, PageRank: 0.013998 },
  "E": { WeightedOut: 2.4, WeightedIn: 1.6, PageRank: 0.035689 },
  "F": { WeightedOut: 3.1, WeightedIn: 3.7, PageRank: 0.053459 },
  "G": { WeightedOut: 2.9, WeightedIn: 2.35, PageRank: 0.033412 },
  "H": { WeightedOut: 2.3, WeightedIn: 1.5, PageRank: 0.021664 },
  "I": { WeightedOut: 2.2, WeightedIn: 1.7, PageRank: 0.072303 },
  "J": { WeightedOut: 1.6, WeightedIn: 1.65, PageRank: 0.04098 },
  "K": { WeightedOut: 2.4, WeightedIn: 4.8, PageRank: 0.120547 },
  "L": { WeightedOut: 2.1, WeightedIn: 3.7, PageRank: 0.088268 },
  "M": { WeightedOut: 1.5, WeightedIn: 1.5, PageRank: 0.016122 },
  "N": { WeightedOut: 2.2, WeightedIn: 2.2, PageRank: 0.040382 },
  "O": { WeightedOut: 2.3, WeightedIn: 2.9, PageRank: 0.083482 },
  "P": { WeightedOut: 2.2, WeightedIn: 2.15, PageRank: 0.05371 },
  "Q": { WeightedOut: 2.2, WeightedIn: 7.75, PageRank: 0.167943 },
  "R": { WeightedOut: 3.0, WeightedIn: 3.6, PageRank: 0.085468 },
  "S": { WeightedOut: 2.2, WeightedIn: 0.6, PageRank: 0.008917 },
  "T": { WeightedOut: 2.7, WeightedIn: 0.0, PageRank: 0.0075 }
};

const layerColors = {
  "reasoning_core": "#60a5fa",
  "coordination": "#a78bfa",
  "planning_control": "#34d399",
  "memory_learning": "#fbbf24",
  "oversight_safety": "#f87171"
};

const layerNames = {
  "reasoning_core": "Reasoning Core",
  "coordination": "Coordination",
  "planning_control": "Planning & Control",
  "memory_learning": "Memory & Learning",
  "oversight_safety": "Oversight & Safety"
};
// Export all data for module imports
export { nodes, links, metrics, layerColors, layerNames };
