[
  {
    "sid": "A",
    "label": "Prompt Chaining",
    "pattern": 1,
    "layer": "reasoning_core",
    "polarity": "fluxus",
    "summary": "Break a large task into validated steps; each step checks the prior step before pass‑through.",
    "pros": "Modular; failure isolation; easier auditing and debugging.",
    "cons": "Context explosion across steps; error propagation if early checks are weak; added latency; diminishing returns with very long chains.",
    "weighted_out": 7.2,
    "weighted_in": 3.6,
    "pagerank": 0.024536
  },
  {
    "sid": "B",
    "label": "Routing",
    "pattern": 2,
    "layer": "coordination",
    "polarity": "latticus",
    "summary": "Classify intent and context and dispatch to the right specialist; ask clarifying questions when uncertain.",
    "pros": "Specialization, scalability, tool segregation, lower misfires.",
    "cons": "Wrong‑path risk; edge‑case sensitivity; often benefits from a manager‑agent overseeing decisions.",
    "weighted_out": 6.6,
    "weighted_in": 2.7,
    "pagerank": 0.035204
  },
  {
    "sid": "C",
    "label": "Parallelization",
    "pattern": 3,
    "layer": "coordination",
    "polarity": "latticus",
    "summary": "Decompose work into independent chunks processed simultaneously by worker agents; normalize and merge outputs.",
    "pros": "",
    "cons": "",
    "weighted_out": 6.45,
    "weighted_in": 2.1,
    "pagerank": 0.020242
  },
  {
    "sid": "D",
    "label": "Reflection",
    "pattern": 4,
    "layer": "reasoning_core",
    "polarity": "fluxus",
    "summary": "Draft → critique against rubrics and tests → revise → loop to a quality threshold or max attempts.",
    "pros": "Higher quality; systematic improvement.",
    "cons": "Cost and latency; API throttling; requires careful loop limits and robust rubrics.",
    "weighted_out": 6.45,
    "weighted_in": 5.1,
    "pagerank": 0.028037
  },
  {
    "sid": "E",
    "label": "Tool Use",
    "pattern": 5,
    "layer": "planning_control",
    "polarity": "latticus",
    "summary": "Discover available tools, verify permissions, call with proper parameters; parse and normalize outputs; provide fallbacks on failures.",
    "pros": "",
    "cons": "",
    "weighted_out": 7.2,
    "weighted_in": 4.8,
    "pagerank": 0.040917
  },
  {
    "sid": "F",
    "label": "Planning",
    "pattern": 6,
    "layer": "planning_control",
    "polarity": "latticus",
    "summary": "Turn big goals into stepwise plans with dependency graphs and constraints (data, authorization, budget, deadlines), then assign to agents and tools.",
    "pros": "",
    "cons": "",
    "weighted_out": 9.3,
    "weighted_in": 11.1,
    "pagerank": 0.055551
  },
  {
    "sid": "G",
    "label": "Multi-Agent Collaboration",
    "pattern": 7,
    "layer": "coordination",
    "polarity": "latticus",
    "summary": "An orchestrator manages specialist agents that share resources and memory; tickets and acceptance criteria gate progression.",
    "pros": "Specialization and parallelism; fits iterative product or software development.",
    "cons": "Testing and drift management overhead; memory governance required; infrastructure complexity.",
    "weighted_out": 8.7,
    "weighted_in": 7.05,
    "pagerank": 0.041049
  },
  {
    "sid": "H",
    "label": "Memory Management",
    "pattern": 8,
    "layer": "memory_learning",
    "polarity": "fluxus",
    "summary": "Classify and store memories with recency and relevance; compress session context when full; enforce privacy and redaction policies.",
    "pros": "",
    "cons": "",
    "weighted_out": 6.9,
    "weighted_in": 4.5,
    "pagerank": 0.033706
  },
  {
    "sid": "I",
    "label": "Learning and Adaptation",
    "pattern": 9,
    "layer": "memory_learning",
    "polarity": "fluxus",
    "summary": "Collect corrections, ratings, outcomes; clean and denoise; update prompts, policies, examples, or product preferences; A/B test; monitor.",
    "pros": "Continuous improvement and personalization.",
    "cons": "Operational cost; risk of learning wrong or malicious signals; require quality checks on feedback channels.",
    "weighted_out": 6.6,
    "weighted_in": 5.1,
    "pagerank": 0.061593
  },
  {
    "sid": "J",
    "label": "Goal Setting and Monitoring",
    "pattern": 10,
    "layer": "planning_control",
    "polarity": "latticus",
    "summary": "Define SMART goals with constraints; specify metrics and KPIs; add quality gates; continuously monitor; detect drift; escalate and correct.",
    "pros": "",
    "cons": "",
    "weighted_out": 4.8,
    "weighted_in": 4.95,
    "pagerank": 0.041253
  },
  {
    "sid": "K",
    "label": "Exception Handling and Recovery",
    "pattern": 11,
    "layer": "oversight_safety",
    "polarity": "latticus",
    "summary": "Detect and capture errors; classify temporary vs. permanent; retry with exponential backoff; prefer safe fallbacks; handle emergencies; alert with context.",
    "pros": "",
    "cons": "",
    "weighted_out": 7.2,
    "weighted_in": 14.4,
    "pagerank": 0.099348
  },
  {
    "sid": "L",
    "label": "Human-in-the-Loop",
    "pattern": 12,
    "layer": "oversight_safety",
    "polarity": "latticus",
    "summary": "Gate high‑risk or edge‑case actions behind review and approval; present diffs and context; allow deny, edit, approve, or takeover.",
    "pros": "",
    "cons": "",
    "weighted_out": 6.3,
    "weighted_in": 11.1,
    "pagerank": 0.076111
  },
  {
    "sid": "M",
    "label": "Retrieval - RAG",
    "pattern": 13,
    "layer": "memory_learning",
    "polarity": "latticus",
    "summary": "Ingest and parse sources; chunk (fixed, semantic, or context‑aware); embed; store; query; retrieve top‑K; rerank; answer with citations; optimize for precision and recall.",
    "pros": "",
    "cons": "",
    "weighted_out": 4.5,
    "weighted_in": 4.5,
    "pagerank": 0.028446
  },
  {
    "sid": "N",
    "label": "Inter-Agent Communication",
    "pattern": 14,
    "layer": "coordination",
    "polarity": "latticus",
    "summary": "Structured messaging with protocols, message IDs, expirations, and security checks; governance can be boss‑centric, peer democracy, or bulletin‑board style.",
    "pros": "Fault isolation; full audit trails; explicit contracts.",
    "cons": "Risk of endless loops, context bloat, and debugging burden; often impractical at scale without strict governance and timeouts.",
    "weighted_out": 6.6,
    "weighted_in": 6.6,
    "pagerank": 0.042914
  },
  {
    "sid": "O",
    "label": "Resource-Aware Optimization",
    "pattern": 15,
    "layer": "planning_control",
    "polarity": "latticus",
    "summary": "Classify task complexity and set budgets; route to small, standard, or reasoning models; monitor tokens, time, and cost; optimize context or switch models when needed.",
    "pros": "",
    "cons": "",
    "weighted_out": 6.9,
    "weighted_in": 8.7,
    "pagerank": 0.069949
  },
  {
    "sid": "P",
    "label": "Prioritization",
    "pattern": 19,
    "layer": "planning_control",
    "polarity": "latticus",
    "summary": "Build a dependency graph; score tasks by dependency count, time sensitivity, effort, risk, and business value; compute a priority score; rank; re‑order as conditions change.",
    "pros": "",
    "cons": "",
    "weighted_out": 6.6,
    "weighted_in": 6.45,
    "pagerank": 0.050999
  },
  {
    "sid": "Q",
    "label": "Evaluation and Monitoring",
    "pattern": 17,
    "layer": "oversight_safety",
    "polarity": "latticus",
    "summary": "Pre‑deployment quality gates and golden tests; in‑production monitoring of accuracy, performance, cost, and drift; anomaly and regression detection; thresholds trigger alerts and investigation; periodic audits harden the system.",
    "pros": "",
    "cons": "",
    "weighted_out": 6.6,
    "weighted_in": 23.25,
    "pagerank": 0.136906
  },
  {
    "sid": "R",
    "label": "Guardrails and Safety",
    "pattern": 18,
    "layer": "oversight_safety",
    "polarity": "latticus",
    "summary": "Upstream input sanitation; PII detection and redaction; injection and malicious content detection; risk classification and controls; output moderation; sandboxing or tool restrictions for high‑risk cases; human oversight for severe events.",
    "pros": "",
    "cons": "",
    "weighted_out": 9.0,
    "weighted_in": 10.8,
    "pagerank": 0.076109
  },
  {
    "sid": "S",
    "label": "Reasoning Techniques",
    "pattern": 16,
    "layer": "reasoning_core",
    "polarity": "fluxus",
    "summary": "Choose among sequential reasoning (chain‑of‑thought), branching exploration (tree‑of‑thought with pruning), ensembles (self‑consistency across samples), or adversarial debate; score candidate solutions via rubric; validate and select or compose.",
    "pros": "",
    "cons": "",
    "weighted_out": 6.6,
    "weighted_in": 1.8,
    "pagerank": 0.019822
  },
  {
    "sid": "T",
    "label": "Exploration and Discovery",
    "pattern": 20,
    "layer": "reasoning_core",
    "polarity": "fluxus",
    "summary": "Broadly survey sources (experts, datasets, papers); compile; map the knowledge space; cluster themes; score by novelty, impact, gaps, feasibility; choose targets; investigate; synthesize artifacts (conceptual models, contacts, curated datasets, bibliographies); iterate to closure; report and recommend next steps.",
    "pros": "",
    "cons": "",
    "weighted_out": 8.1,
    "weighted_in": 0.0,
    "pagerank": 0.017308
  }
]